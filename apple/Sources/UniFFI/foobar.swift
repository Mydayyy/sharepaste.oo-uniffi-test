// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(foobarFFI)
    import foobarFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_foobar_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_foobar_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

private struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}

/**
 * A binary operator that performs some mathematical operation with two numbers.
 */
public protocol BinaryOperator: AnyObject {
    func perform(lhs: Int64, rhs: Int64) throws -> Int64
}

/**
 * A binary operator that performs some mathematical operation with two numbers.
 */
public class BinaryOperatorImpl:
    BinaryOperator
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_foobar_fn_clone_binaryoperator(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_foobar_fn_free_binaryoperator(pointer, $0) }
    }

    public func perform(lhs: Int64, rhs: Int64) throws -> Int64 {
        return try FfiConverterInt64.lift(
            rustCallWithError(FfiConverterTypeComputationError.lift) {
                uniffi_foobar_fn_method_binaryoperator_perform(self.uniffiClonePointer(),
                                                               FfiConverterInt64.lower(lhs),
                                                               FfiConverterInt64.lower(rhs), $0)
            }
        )
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for BinaryOperator Callback Interface

private let uniffiCallbackInterfaceBinaryOperator: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokePerform(_ swiftCallbackInterface: BinaryOperator, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result = try swiftCallbackInterface.perform(
                lhs: FfiConverterInt64.read(from: &reader),
                rhs: FfiConverterInt64.read(from: &reader)
            )
            var writer = [UInt8]()
            FfiConverterInt64.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        do {
            return try makeCall()
        } catch let error as ComputationError {
            out_buf.pointee = FfiConverterTypeComputationError.lower(error)
            return UNIFFI_CALLBACK_ERROR
        }
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterTypeBinaryOperator.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterTypeBinaryOperator.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokePerform(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitBinaryOperator() {
    uniffi_foobar_fn_init_callback_binaryoperator(uniffiCallbackInterfaceBinaryOperator)
}

public struct FfiConverterTypeBinaryOperator: FfiConverter {
    fileprivate static var handleMap = UniFFICallbackHandleMap<BinaryOperator>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = BinaryOperator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> BinaryOperator {
        return BinaryOperatorImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: BinaryOperator) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BinaryOperator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: BinaryOperator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeBinaryOperator_lift(_ pointer: UnsafeMutableRawPointer) throws -> BinaryOperator {
    return try FfiConverterTypeBinaryOperator.lift(pointer)
}

public func FfiConverterTypeBinaryOperator_lower(_ value: BinaryOperator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeBinaryOperator.lower(value)
}

/**
 * A somewhat silly demonstration of functional core/imperative shell in the form of a calculator with arbitrary operators.
 *
 * Operations return a new calculator with updated internal state reflecting the computation.
 */
public protocol CalculatorProtocol: AnyObject {
    /**
     * Performs a calculation using the supplied binary operator and operands.
     */
    func calculate(op: BinaryOperator, lhs: Int64, rhs: Int64) throws -> Calculator

    /**
     * Performs a calculation using the supplied binary operator, the last computation result, and the supplied operand.
     *
     * The supplied operand will be the right-hand side in the mathematical operation.
     */
    func calculateMore(op: BinaryOperator, rhs: Int64) throws -> Calculator

    func lastResult() -> ComputationResult?
}

/**
 * A somewhat silly demonstration of functional core/imperative shell in the form of a calculator with arbitrary operators.
 *
 * Operations return a new calculator with updated internal state reflecting the computation.
 */
public class Calculator:
    CalculatorProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_foobar_fn_clone_calculator(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_foobar_fn_constructor_calculator_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_foobar_fn_free_calculator(pointer, $0) }
    }

    /**
     * Performs a calculation using the supplied binary operator and operands.
     */
    public func calculate(op: BinaryOperator, lhs: Int64, rhs: Int64) throws -> Calculator {
        return try FfiConverterTypeCalculator.lift(
            rustCallWithError(FfiConverterTypeComputationError.lift) {
                uniffi_foobar_fn_method_calculator_calculate(self.uniffiClonePointer(),
                                                             FfiConverterTypeBinaryOperator.lower(op),
                                                             FfiConverterInt64.lower(lhs),
                                                             FfiConverterInt64.lower(rhs), $0)
            }
        )
    }

    /**
     * Performs a calculation using the supplied binary operator, the last computation result, and the supplied operand.
     *
     * The supplied operand will be the right-hand side in the mathematical operation.
     */
    public func calculateMore(op: BinaryOperator, rhs: Int64) throws -> Calculator {
        return try FfiConverterTypeCalculator.lift(
            rustCallWithError(FfiConverterTypeComputationError.lift) {
                uniffi_foobar_fn_method_calculator_calculate_more(self.uniffiClonePointer(),
                                                                  FfiConverterTypeBinaryOperator.lower(op),
                                                                  FfiConverterInt64.lower(rhs), $0)
            }
        )
    }

    public func lastResult() -> ComputationResult? {
        return try! FfiConverterOptionTypeComputationResult.lift(
            try!
                rustCall {
                    uniffi_foobar_fn_method_calculator_last_result(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeCalculator: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Calculator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Calculator {
        return Calculator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Calculator) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Calculator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Calculator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeCalculator_lift(_ pointer: UnsafeMutableRawPointer) throws -> Calculator {
    return try FfiConverterTypeCalculator.lift(pointer)
}

public func FfiConverterTypeCalculator_lower(_ value: Calculator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCalculator.lower(value)
}

public protocol SafeAdditionProtocol: AnyObject {
    func perform(lhs: Int64, rhs: Int64) throws -> Int64
}

public class SafeAddition:
    SafeAdditionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_foobar_fn_clone_safeaddition(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_foobar_fn_constructor_safeaddition_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_foobar_fn_free_safeaddition(pointer, $0) }
    }

    public func perform(lhs: Int64, rhs: Int64) throws -> Int64 {
        return try FfiConverterInt64.lift(
            rustCallWithError(FfiConverterTypeComputationError.lift) {
                uniffi_foobar_fn_method_safeaddition_perform(self.uniffiClonePointer(),
                                                             FfiConverterInt64.lower(lhs),
                                                             FfiConverterInt64.lower(rhs), $0)
            }
        )
    }
}

public struct FfiConverterTypeSafeAddition: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SafeAddition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SafeAddition {
        return SafeAddition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SafeAddition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SafeAddition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SafeAddition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSafeAddition_lift(_ pointer: UnsafeMutableRawPointer) throws -> SafeAddition {
    return try FfiConverterTypeSafeAddition.lift(pointer)
}

public func FfiConverterTypeSafeAddition_lower(_ value: SafeAddition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSafeAddition.lower(value)
}

public protocol SafeDivisionProtocol: AnyObject {
    func perform(lhs: Int64, rhs: Int64) throws -> Int64
}

public class SafeDivision:
    SafeDivisionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_foobar_fn_clone_safedivision(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_foobar_fn_constructor_safedivision_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_foobar_fn_free_safedivision(pointer, $0) }
    }

    public func perform(lhs: Int64, rhs: Int64) throws -> Int64 {
        return try FfiConverterInt64.lift(
            rustCallWithError(FfiConverterTypeComputationError.lift) {
                uniffi_foobar_fn_method_safedivision_perform(self.uniffiClonePointer(),
                                                             FfiConverterInt64.lower(lhs),
                                                             FfiConverterInt64.lower(rhs), $0)
            }
        )
    }
}

public struct FfiConverterTypeSafeDivision: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = SafeDivision

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> SafeDivision {
        return SafeDivision(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: SafeDivision) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SafeDivision {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: SafeDivision, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeSafeDivision_lift(_ pointer: UnsafeMutableRawPointer) throws -> SafeDivision {
    return try FfiConverterTypeSafeDivision.lift(pointer)
}

public func FfiConverterTypeSafeDivision_lower(_ value: SafeDivision) -> UnsafeMutableRawPointer {
    return FfiConverterTypeSafeDivision.lower(value)
}

public struct ComputationResult {
    public var value: Int64
    public var computationTime: TimeInterval

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        value: Int64,
        computationTime: TimeInterval
    ) {
        self.value = value
        self.computationTime = computationTime
    }
}

extension ComputationResult: Equatable, Hashable {
    public static func == (lhs: ComputationResult, rhs: ComputationResult) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.computationTime != rhs.computationTime {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(computationTime)
    }
}

public struct FfiConverterTypeComputationResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputationResult {
        return
            try ComputationResult(
                value: FfiConverterInt64.read(from: &buf),
                computationTime: FfiConverterDuration.read(from: &buf)
            )
    }

    public static func write(_ value: ComputationResult, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.value, into: &buf)
        FfiConverterDuration.write(value.computationTime, into: &buf)
    }
}

public func FfiConverterTypeComputationResult_lift(_ buf: RustBuffer) throws -> ComputationResult {
    return try FfiConverterTypeComputationResult.lift(buf)
}

public func FfiConverterTypeComputationResult_lower(_ value: ComputationResult) -> RustBuffer {
    return FfiConverterTypeComputationResult.lower(value)
}

public enum ComputationError {
    case DivisionByZero
    case Overflow
    case IllegalComputationWithInitState

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeComputationError.lift(error)
    }
}

public struct FfiConverterTypeComputationError: FfiConverterRustBuffer {
    typealias SwiftType = ComputationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .DivisionByZero
        case 2: return .Overflow
        case 3: return .IllegalComputationWithInitState

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ComputationError, into buf: inout [UInt8]) {
        switch value {
        case .DivisionByZero:
            writeInt(&buf, Int32(1))

        case .Overflow:
            writeInt(&buf, Int32(2))

        case .IllegalComputationWithInitState:
            writeInt(&buf, Int32(3))
        }
    }
}

extension ComputationError: Equatable, Hashable {}

extension ComputationError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ComputationState {
    /**
     * Initial state with no value computed
     */
    case `init`
    case computed(
        result: ComputationResult
    )
}

public struct FfiConverterTypeComputationState: FfiConverterRustBuffer {
    typealias SwiftType = ComputationState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComputationState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .`init`

        case 2: return try .computed(
                result: FfiConverterTypeComputationResult.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ComputationState, into buf: inout [UInt8]) {
        switch value {
        case .`init`:
            writeInt(&buf, Int32(1))

        case let .computed(result):
            writeInt(&buf, Int32(2))
            FfiConverterTypeComputationResult.write(result, into: &buf)
        }
    }
}

public func FfiConverterTypeComputationState_lift(_ buf: RustBuffer) throws -> ComputationState {
    return try FfiConverterTypeComputationState.lift(buf)
}

public func FfiConverterTypeComputationState_lower(_ value: ComputationState) -> RustBuffer {
    return FfiConverterTypeComputationState.lower(value)
}

extension ComputationState: Equatable, Hashable {}

private struct FfiConverterOptionTypeComputationResult: FfiConverterRustBuffer {
    typealias SwiftType = ComputationResult?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeComputationResult.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeComputationResult.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

public func add(left: Int64, right: Int64) -> Int64 {
    return try! FfiConverterInt64.lift(
        try! rustCall {
            uniffi_foobar_fn_func_add(
                FfiConverterInt64.lower(left),
                FfiConverterInt64.lower(right), $0
            )
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_foobar_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_foobar_checksum_func_add() != 11759 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_binaryoperator_perform() != 6069 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_calculator_calculate() != 51449 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_calculator_calculate_more() != 15422 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_calculator_last_result() != 48598 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_safeaddition_perform() != 53970 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_method_safedivision_perform() != 5049 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_constructor_calculator_new() != 38354 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_constructor_safeaddition_new() != 1337 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_foobar_checksum_constructor_safedivision_new() != 26242 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitBinaryOperator()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
